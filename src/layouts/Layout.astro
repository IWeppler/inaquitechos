---
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import SEO from "../components/SEO.astro";
import { ClientRouter } from "astro:transitions";
import { ArrowUp } from "lucide-astro";
import "../styles/global.css";
import FinalCTA from "../components/FinalCTA.astro";

interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { title, description, image } = Astro.props;
---

<!doctype html>
<html lang="es" class="scroll-smooth">
  <head>
    <SEO title={title} description={description} image={image} />
    <ClientRouter />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Teko:wght@700&display=swap"
      rel="stylesheet"
    />

    <script is:inline defer src="/netlify-analytics.js"></script>
  </head>

  <body class="bg-white text-slate-800">
    <Navbar />
    <main>
      <slot />
    </main>
    <FinalCTA />
    <Footer />
    <button
      id="back-to-top-btn"
      aria-label="Volver arriba"
      class="fixed bottom-8 right-8 z-50 w-12 h-12 bg-brand text-white rounded-full shadow-lg flex items-center justify-center
           opacity-0 invisible transition-all duration-300 ease-in-out
           hover:bg-brand-hover hover:scale-110"
    >
      <ArrowUp class="w-6 h-6" />
    </button>
  </body>
</html>

<script>
  // Lógica para el botón de "Volver Arriba"
  const backToTopButton = document.getElementById("back-to-top-btn");
  if (backToTopButton) {
    window.addEventListener("scroll", () => {
      if (window.scrollY > 400) {
        backToTopButton.classList.remove("opacity-0", "invisible");
      } else {
        backToTopButton.classList.add("opacity-0", "invisible");
      }
    });
    backToTopButton.addEventListener("click", () => {
      window.scrollTo({ top: 0, behavior: "smooth" });
    });
  }

  // Lógica para las animaciones On-Scroll
  document.addEventListener("astro:page-load", () => {
    const handleIntersection = (
      entries: IntersectionObserverEntry[],
      observer: IntersectionObserver
    ) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("is-visible");
          observer.unobserve(entry.target);
        }
      });
    };

    const observer = new IntersectionObserver(handleIntersection, {
      root: null,
      rootMargin: "0px",
      threshold: 0.1,
    });

    const elementsToAnimate = document.querySelectorAll(".fade-in-on-scroll");
    elementsToAnimate.forEach((element) => observer.observe(element));
  });
</script>
